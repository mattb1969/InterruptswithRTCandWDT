This is the original code I was working with before I went back to basics to try and get something
working that I actually understood




/*
 * File: main_bkup.cpp
 * Project: src
 * File Created: Monday, 1st February 2021 9:46:09 pm
 * Author: Matthew Bennett (matthew@mlbennett.com)
 * -----
 * Last Modified: Monday, 1st February 2021 9:46:09 pm
 * Modified By: Matthew Bennett (matthew@mlbennett.com>)
 * -----
 * Copyright - 2021 
 * <<license>>
 */


/* This project is testing the functionality of interrupts when in different operating modes
* It has taken inspiration from my weather station project */

#include <MKRWAN.h>

#include "WDTZero.h"

#define     SUBSTITUTE          false            // set to true to use substitued values


// ToDo: Can I convert these to #define instead to lower memory usage
static const uint8_t        INTERRUPT_SENSOR_PIN = 4;
static const uint16_t       SEND_FREQUENCY = 30;         // Send freq in Seconds

static const uint8_t        TESTMODE_SET = 1;

WDTZero             wdt;  

volatile bool       rtc_triggered = false;

volatile bool        TEST_MODE = false;
volatile bool        DEBUG = true;
volatile bool       WATCHDOG_ENABLED = false;
volatile bool       RTC_ENABLED = false;

//------------------------------------------------------------------------------
// Generic modules

void blink_led(int ontime=100, int offtime=50, int flashes=1) {
    while (flashes >0) {
        digitalWrite(LED_BUILTIN, HIGH);
        delayMicroseconds(ontime*1000);
        digitalWrite(LED_BUILTIN, LOW);
        if (flashes > 1) delayMicroseconds(offtime*1000);           // If it is not the last flash, wait until returning to the top of the loop
        flashes --;
    }
    return;
}

//------------------------------------------------------------------------------
// RTC modules
void InitTC(void) {
    if (DEBUG) Serial.println("Setup TC");
    //Set Clock divider for GCLK4
    GCLK->GENDIV.reg =  GCLK_GENDIV_DIV(4) |    //Divide 32.768kHz / 2^(4 + 1)
                        GCLK_GENDIV_ID(4);      //GCLK4
    while (GCLK->STATUS.bit.SYNCBUSY); //Wait for the settings to be synchronized

    //Configure Clock Generator 4 to give output to Timer modules to generate PWM signal
    GCLK->GENCTRL.reg = GCLK_GENCTRL_RUNSTDBY | // Set GCLK4 to run in standby mode
            GCLK_GENCTRL_OE | // Output GCLK4 on D6 (PA20)
            GCLK_GENCTRL_DIVSEL | // Set divisor to 2^(4 + 1)
            GCLK_GENCTRL_IDC | //50-50 Duty
            GCLK_GENCTRL_GENEN | //Enable generic clock generator
            //GCLK_GENCTRL_SRC_DFLL48M |  //48MHZ clock as the input of the general clock generator as source
            GCLK_GENCTRL_SRC_OSCULP32K | // Use the Ultra Low Power 32kHz oscillator
            GCLK_GENCTRL_ID(4); //Select GCLK 4*/

    //Connect GCLK4 output to TC modules
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | //Enable generic clock
            GCLK_CLKCTRL_GEN_GCLK4 | //Select GCLK4
            GCLK_CLKCTRL_ID_TC4_TC5; //Feed GCLK4 output to TC4 & TC5

    TC4->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCSYNC_PRESC | // Trigger next cycle on prescaler clock (not GCLK)
            TC_CTRLA_RUNSTDBY | // Set the timer to run in standby mode
            TC_CTRLA_PRESCALER_DIV1024 | // Division factor 1024
            TC_CTRLA_WAVEGEN_MFRQ | // Enable Matched Frequency Waveform generation
            TC_CTRLA_MODE_COUNT16; // Enable 16-bit COUNT mode

    TC4->COUNT16.CC[0].reg = SEND_FREQUENCY; //Set the send frequency counter
    if (DEBUG) Serial.println("TC Value set to SEND_FREQUENCY");
    
    while (TC4->COUNT16.STATUS.bit.SYNCBUSY); //Wait for synchronization

    // Configure TC4 interrupt request
    NVIC_SetPriority(TC4_IRQn, 0);
    NVIC_EnableIRQ(TC4_IRQn);

    TC4->COUNT16.INTENSET.reg = TC_INTENSET_OVF; // Enable TC4 interrupts

    TC4->COUNT16.CTRLA.bit.ENABLE = 1; // Enable TC4
    while (TC4->COUNT16.STATUS.bit.SYNCBUSY); // Wait for synchronization
}

//------------------------------------------------------------------------------
// Watchdog modules


//------------------------------------------------------------------------------
// Main modules

// ISR Routine for the pin being activated
void interruptCalled() {
    digitalWrite(LED_BUILTIN, HIGH);
    if (DEBUG) Serial.println("Interrupt");

    delayMicroseconds(250*1000);

    digitalWrite(LED_BUILTIN, LOW);
}

//ISR routine for the RTC being triggered
void TC4_Handler() // Interrupt Service Routine (ISR) for timer TC4
{
    // Check for overflow (OVF) interrupt
    if (TC4->COUNT16.INTENSET.bit.OVF) {
        TC4->COUNT16.INTFLAG.bit.OVF = 1; // Clear the OVF interrupt flag

        if (DEBUG) Serial.println("RTC Triggered");
        // Put your timer overflow (OVF) code here:     
        rtc_triggered = true;
    }
}

void notused_rtcinterrupt () {
    if (DEBUG) Serial.println("RTC");
    rtc_triggered = true;
}

void wdtinterrupt() {
    if (DEBUG) Serial.println("WDT Shutdown");
    // This code will run as part of the shutdown
    blink_led(100, 200, 5);
}

void wdt_setup() {
    if (Serial) Serial.println("WDT Setup\n");
    wdt.setup(WDT_SOFTCYCLE1M);   
    wdt.attachShutdown(wdtinterrupt);
}

void wdt_clear () {
    wdt.setup(WDT_OFF);
}

void wdt_reset() {
    wdt.clear();
}

void setup () {
    
    //Set all pins to input and 
    
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(TESTMODE_SET, INPUT_PULLDOWN);
    pinMode(INTERRUPT_SENSOR_PIN, INPUT_PULLDOWN);
    
    if (digitalRead(TESTMODE_SET)) {
        TEST_MODE = true;
        Serial.begin(115200);
        if (!Serial) delayMicroseconds(2500*1000);
        if (DEBUG) {
            Serial.println("In Test Mode");
            blink_led(250,250);
        }
 
    }
    else {
        // Not in test mode, so turn off power requirements.
        //Firstly ensure we are not running any debug software
        DEBUG = false;
        USBDevice.detach();
        blink_led(50, 450, 5);
    }

    // Setup interrupts
    attachInterrupt(digitalPinToInterrupt(INTERRUPT_SENSOR_PIN), interruptCalled, RISING);

    if (RTC_ENABLED) InitTC();                           // set the counter to trigger every SEND_FREQUENCY seconds
    
    SYSCTRL->VREG.bit.RUNSTDBY = 1; // Keep the voltage regulator in normal configuration during run standby
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_SLEEPPRM_DISABLED; // Disable auto power reduction during sleep - SAMD21 Errata 1.14.2

    //Turn on the Watchdog to handle failures
    if (WATCHDOG_ENABLED) wdt_setup();
}

void loop() {

    if (TEST_MODE) {
        // Just wait a while until the next result capture.
        if (DEBUG) Serial.println("Waiting...");
        rtc_triggered = true;
        delayMicroseconds (SEND_FREQUENCY * 1000 * 1000);              // Removed need for exact timing as in Test mode & millis not set here anymore
    }
    else {
        // Go to sleep and wait for an interrupt to trigger
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
        __DSB();
        __WFI();
    }
    if (rtc_triggered) {
        
        //#ToDo Do something here
        blink_led(100, 200, 2);


        rtc_triggered = false;
    }
    // Cancel the watchdog if it has completed the routine
    if (WATCHDOG_ENABLED) wdt_reset();
}
